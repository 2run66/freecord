version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: freecord-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-freecord}
      POSTGRES_USER: ${POSTGRES_USER:-freecord_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-freecord_user} -d ${POSTGRES_DB:-freecord}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - freecord-network

  # Redis for session storage and caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: freecord-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - freecord-network

  # Freecord Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-pk_test_placeholder}
        NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_SIGN_IN_URL:-/sign-in}
        NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_SIGN_UP_URL:-/sign-up}
        NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL:-/}
        NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL:-/}
        NEXT_PUBLIC_LIVEKIT_URL: ${NEXT_PUBLIC_LIVEKIT_URL:-wss://your-project.livekit.cloud}
    container_name: freecord-app
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL:-postgresql://${POSTGRES_USER:-freecord_user}:${POSTGRES_PASSWORD:-change_me}@postgres:5432/${POSTGRES_DB:-freecord}}
      
      # Node Environment
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
      
      # Clerk Authentication (you need to set these)
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:-pk_test_placeholder}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY:-sk_test_placeholder}
      NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_SIGN_IN_URL:-/sign-in}
      NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_SIGN_UP_URL:-/sign-up}
      NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL:-/}
      NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL:-/}
      
      # LiveKit (you need to set these)
      LIVEKIT_API_KEY: ${LIVEKIT_API_KEY:-your_livekit_api_key}
      LIVEKIT_API_SECRET: ${LIVEKIT_API_SECRET:-your_livekit_api_secret}
      NEXT_PUBLIC_LIVEKIT_URL: ${NEXT_PUBLIC_LIVEKIT_URL:-wss://your-project.livekit.cloud}
      

      
      # Optional Redis URL
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - freecord-network
    volumes:
      # Mount uploads directory for persistent file storage
      - uploads_data:/app/uploads

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  freecord-network:
    driver: bridge
